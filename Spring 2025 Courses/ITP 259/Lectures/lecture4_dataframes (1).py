# -*- coding: utf-8 -*-
"""Lecture4_dataframes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GUUx9qMNpd3aQaxZ6BhiHkjBbR1Xasx4
"""

import pandas as pd

# Teaser...

wineData = pd.read_csv("sample_data/wineQualityReds.csv")
wineData
#print(wineData.head())

"""# Series"""

import pandas as pd

series1 = pd.Series([4, 7, -5, 3])

print("Series:\n", series1)
print("Series values: \n", series1.values)
print("Series index: \n", series1.index)

print("Series index: \n", series1.index)

series1 = pd.Series([4, 7, -5, 3], index=['d','b','a','c'])

print("Series: \n", series1)
print("Series values: \n", series1.values)
print("Series index: \n", series1.index)

series2 = pd.Series([4, 7, -5, 3], index=['d','b','a','c'])
print("Index d:", series2['d'])

series2['d'] = 6
print("Updated index d: ", series2['d'])

print("Series index range: \n", series2[['a', 'c', 'd']])

import numpy as np

series2 = pd.Series([4, 7, -5, 3], index=['d','b','a','c'])

print("Numpy like filering: \n", series2[series2 > 0])
print("Numpy like filering: \n", series2 * 2)
print("Pass series to Numpy function: \n", np.absolute(series2))

series2 = pd.Series([4, 7, -5, 3], index=['d','b','a','c'])

series2.name = "Numbers"
series2.index.name = "Letters"

# print("Values title: ", series2.name)
# print("Index title: ", series2.index.name)

print(series2)

"""# DataFrames

We can start with a standard dictionary
"""

import pandas as pd

data = {'state': ['Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'],
        'year': [2001, 2002, 2001, 2001, 2003],
        'pop': [1.7, 3.6, 2.4, 2.9, 3.2]
        }
frame = pd.DataFrame(data)
print(frame)
print("First 5 rows: \n", frame.head())
print(frame.dtypes)

frame.describe()

frame.mean()

frame = pd.DataFrame(data, index=['one', 'two', 'three', 'four', 'five'])
print(frame)

frame = pd.DataFrame(data, columns=['year', 'state', 'pop'],
                     index=['one', 'two', 'three', 'four', 'five'])
print("Column retrieval: \n", frame['state'])
print("Column retrieval: \n", frame['year'])
print("Column retrieval: \n", frame.year)

print("Multiple Columns retrieval: \n", frame[['year', 'state']])

print("Add and populate a column:")
frame["easter"] = ( frame["state"] == "Ohio" )
print(frame)
print("Delete column:")
del frame["easter"]
print(frame)

obj = pd.Series([5, 4, 3, 8], index=['a', 'b', 'c', 'd'])
print(obj)
print("Retrieve by Index Name: ", obj['b'])
print("Retrieve by Index location: ", obj[3])
print("Retrieve by Index location: ", obj[1])
print("Retrieve by Index location: ", obj[3])
print("Retrieve by multiple Index locations: ", obj[[2,3]])
print("Retrieve with Index range: \n", obj[2:4])
print("Retrieve with multiple Index names: \n", obj[['b','c']])
print("Retrieve with Index condition: \n", obj[obj < 5])

obj = pd.Series(np.arange(1, 5.0), index=['a', 'b', 'c', 'd'])
print(obj)

data = pd.DataFrame(np.arange(24).reshape((6,4)),
                    index=['Colorado', 'Utah', 'New York', 'a', 'b', 'c'],
                    columns=['one', 'two', 'three', 'four'])
print(data)
print(data[['two','four']])
print(data[data['three']>0])

print(data > 5)

data[data > 5] = 0
print(data)

data = pd.DataFrame(np.arange(12).reshape((3,4)),
                    index=['Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])
print("Index rows and columns by index:")
print(data)
print("\n")
print(data.iloc[1:2,0])
print("\n")
print(data.iloc[0])
print("\n")
print(data.iloc[[1], [1]])

data = pd.DataFrame(np.arange(12).reshape((3,4)),
                    index=['Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])
print("Index rows and columns by index:")
print(data)
print("\n")
print(data.loc['Colorado'])
print("\n")
print(data.loc['Colorado', ['two', 'three']])
print("\n")
print(data.loc[['Colorado', 'Utah'], ['two', 'three']])

data = pd.DataFrame(np.arange(12).reshape((3,4)),
                    index=['Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])

print(data)
print("\n")
print(np.power(data['one'],data['two']))

series = pd.Series(range(4), index=['d', 'a', 'b', 'c'])
print(series)
print("\n")
print("Sort Series ascending by index: \n", series.sort_index())
print("Sort Series descending by index: \n", series.sort_index(ascending=False))

frame = pd.DataFrame({'b': [4,7,-3,2], 'a': [0,1,0,1]})
print(frame)
print("Sort ascending by value: \n",
      frame.sort_values(by=['a', 'b']))
print("Sort descending by value: \n",
      frame.sort_values(by=['a', 'b'], ascending=False))
print(frame.sort_values(by=['a', 'b'], ascending=[True, False]))

"""# Do the Following: combine two series to form a Dataframe"""

import numpy as np
import pandas as pd

series1 = pd.Series(list('abcdefghijklmnopqrstuvwxyz'))
series2 = pd.Series(np.arange(26))

data = {'col1': series1,
        'col2': series2}
frame = pd.DataFrame(data)
print(frame)

"""# Do the Following: display the 25th, 50th, and 75th percentiles for a Series containing 100 random numbers from the standard normal distribution."""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

series1 = pd.Series(np.random.randn(100000))
#series1 = pd.Series(np.random.randn(10000))

plt.hist(series1, bins=200, facecolor='blue', alpha=0.5)

q1 = np.percentile(series1, q=25)
q2 = np.percentile(series1, q=50)
q3 = np.percentile(series1, q=75)

#print(series1)
#print("\n")
print(np.percentile(series1, q=[25, 50, 75]))

plt.axvline(q1, color='red')
plt.axvline(q2, color='yellow')
plt.axvline(q3, color='green')

"""# Visualization"""

wineData = pd.read_csv("sample_data/wineQualityReds.csv")

wineData.plot.scatter('chlorides', 'density')

import matplotlib.pyplot as plt

plt.scatter(wineData['chlorides'], wineData['density'])
plt.show()

import numpy as np
import pandas as pd
import seaborn as sns
sns.set_palette('husl')
import matplotlib.pyplot as plt

iris = pd.read_csv('sample_data/Iris.csv')
print(iris)
tmp = iris.drop('Id', axis=1)
g = sns.pairplot(tmp, hue='Species', markers='+')
plt.show()

iris.shape