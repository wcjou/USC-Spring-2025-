# -*- coding: utf-8 -*-
"""Lecture8_circular.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NaUeHqQvWqfnAqqtLgjEQZpDoJx0A3Lw
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.datasets import make_circles
from  sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.neural_network import  MLPClassifier

# Choose the noise level and the separation between the circles
X, y = make_circles(n_samples=1000, noise=0.1, random_state=2022, factor=.2)
print(X)
print(y)

plt.scatter(x=X[:,0], y=X[:,1], c=y)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Blobs')

plt.show()

# Train test datasets
X_train, X_test , Y_train, Y_test = \
    train_test_split(X, y,test_size=0.30, random_state=2022, stratify=y)
#
# print(X_train)
# print(X_test)
# print(Y_train)
# print(Y_test)

# Instantiate MLPClassifier
mlp = MLPClassifier(hidden_layer_sizes=(5,5), activation="relu",
                    max_iter=1000, alpha=1e-3, solver="adam",
                    random_state=2022, learning_rate_init=0.01, verbose=True)

# Training
mlp.fit(X_train, Y_train)

# Plot loss curve
plt.plot(mlp.loss_curve_)
plt.show()

# Accuracy
print("The accuracy is", mlp.score(X_test,Y_test))

# Confusion matrix
y_pred = mlp.predict(X_test)

cm = confusion_matrix(Y_test, y_pred, labels=mlp.classes_)
ConfusionMatrixDisplay(confusion_matrix=cm).plot()
plt.show()

# Plot the decision boundary. Create a mesh of x and y points. Then
# predict the label. Then plot those with color.
X1 = np.arange(-2,2, 0.01) # 400 points
X2 = np.arange(-2,2,0.01) # 400 points

X1, X2 = np.meshgrid(X1, X2)

X_decision = pd.DataFrame({"A": np.reshape(X1,160000), "B": np.reshape(X2,160000)}) # 400*400 = 160000
Z = mlp.predict(X_decision)

plt.scatter(x=X_decision["A"],y=X_decision["B"], c=Z, cmap="BuGn")
plt.scatter(x=X[:,0], y=X[:,1], c=y)
plt.show()